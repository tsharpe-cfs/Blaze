@page "/"
@using Blaze.Json
@using Blaze.Models
@using System.Text

<PageTitle>Neutrino Telem</PageTitle>

<h1>Neutrino Telem</h1>
<RadzenRow>
	<RadzenTabs @ref="nodeTabs" RenderMode="TabRenderMode.Client" TabPosition="TabPosition.Left">
		<Tabs>
			@foreach (var item in _nodes)
			{
				<RadzenTabsItem Text="@(item.Key)">
					<RadzenTabs @ref="telemTabs" RenderMode="TabRenderMode.Client" TabPosition="TabPosition.Top">
						<Tabs>
							@if (item.Value.Devices.Any())
							{
								<RadzenTabsItem Text="Devices" />
							}
							@if (item.Value.Console != string.Empty)
							{
								<RadzenTabsItem Text="Console">
									<RadzenTextArea @bind-Value="@item.Value.Console" Cols="100" Rows="50" />
								</RadzenTabsItem>
							}
						</Tabs>
					</RadzenTabs>
				</RadzenTabsItem>
			}
		</Tabs>
	</RadzenTabs>
</RadzenRow>

<RadzenFooter>
	<RadzenLabel Text="@_client.State.ToString()" />
</RadzenFooter>


@code {
	//UI to update
	RadzenTabs nodeTabs;
	RadzenTabs telemTabs;

	private RelayClient _client = new RelayClient();
	private Dictionary<string, Node> _nodes = new Dictionary<string, Node>();
	private Node _selected;

	protected override async Task OnInitializedAsync()
	{
		//_client.StateChanged += (s, e) =>
		_client.TelemReceived += OnTelemReceived;

		await _client.Connect();
		//_nodes.Nodes.CollectionChanged += (s, e) => InvokeAsync(StateHasChanged);
		_ = _client.ReceiveLoop();
	}

	private void OnTelemReceived(object sender, Telem telem)
	{
		if (!_nodes.ContainsKey(telem.header.node_name))
		{
			_nodes.Add(telem.header.node_name, new Node());
		}

		Node node = _nodes[telem.header.node_name];
		if ((telem.header.is_stream) && (telem.values.ContainsKey("console")))
		{
			string text = telem.values["console"].ToString();
			byte[] bytes = Convert.FromBase64String(text);
			node.Console += Encoding.ASCII.GetString(bytes);
		}
		else
		{
			foreach (KeyValuePair<string, object> pair in telem.values)
			{
				if (!node.Devices.ContainsKey(pair.Key))
					node.Devices.Add(pair.Key, new Device());

				Device device = node.Devices[pair.Key];
				device.LastSeen = DateTime.Now;
				device.Value = pair.Value;
			}
		}

		InvokeAsync(StateHasChanged);
	}
}
