@page "/"
@inject IJSRuntime JS
@using Blaze.Json
@using Blaze.Models
@using System.Text

<PageTitle>Neutrino Telem</PageTitle>

<h1>Neutrino Telem</h1>
<p>Websocket: @_client.State.ToString()</p>

<RadzenRow>
	<RadzenTabs RenderMode="TabRenderMode.Client" TabPosition="TabPosition.Left">
		<Tabs>
			@foreach (var item in _nodes)
			{
				<RadzenTabsItem Text="@(item.Key)">
					<RadzenTabs RenderMode="TabRenderMode.Client" TabPosition="TabPosition.Top">
						<Tabs>
							@if (item.Value.Devices.Any())
							{
								<RadzenTabsItem Text="Devices">
									<RadzenDataGrid Data="@item.Value.Devices.Values" TItem="Device" AllowColumnResize="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Simple">
										<Columns>
											<RadzenDataGridColumn TItem="Device" Property="Name" Title="Name" SortOrder="SortOrder.Ascending" />
											<RadzenDataGridColumn TItem="Device" Property="Value" Title="Value" Filterable="false" />
											<RadzenDataGridColumn TItem="Device" Property="LastSeen" Title="Last Seen" Filterable="false" />
										</Columns>
									</RadzenDataGrid>
								</RadzenTabsItem>
							}
							
							@if (!String.IsNullOrEmpty(item.Value.Console))
							{
								<RadzenTabsItem Text="Console" Disabled="true">
									<RadzenTextArea Value="@item.Value.Console" Cols="160" Rows="25" />
								</RadzenTabsItem>
							}
						</Tabs>
					</RadzenTabs>
				</RadzenTabsItem>
			}
		</Tabs>
	</RadzenTabs>
</RadzenRow>

@code {
	private RelayClient _client = new RelayClient();
	private Dictionary<string, Node> _nodes = new Dictionary<string, Node>();

	protected override async Task OnInitializedAsync()
	{
		_client.TelemReceived += OnTelemReceived;

		await _client.Connect();
		_ = _client.ReceiveLoop();
		_ = UpdateLoop();
	}

	private async Task UpdateLoop()
	{
		while (true)
		{
			await InvokeAsync(StateHasChanged);
			await Task.Delay(500);
		}
	}

	private void OnTelemReceived(object sender, Telem telem)
	{
		if (!_nodes.ContainsKey(telem.header.node_name))
		{
			_nodes.Add(telem.header.node_name, new Node());
		}

		Node node = _nodes[telem.header.node_name];
		if ((telem.header.is_stream) && (telem.values.ContainsKey("console")))
		{
			string text = telem.values["console"].ToString();
			byte[] bytes = Convert.FromBase64String(text);
			node.Console += Encoding.ASCII.GetString(bytes);
		}
		else
		{
			foreach (KeyValuePair<string, object> pair in telem.values)
			{
				if (!node.Devices.ContainsKey(pair.Key))
					node.Devices.Add(pair.Key, new Device { Name = pair.Key });

				Device device = node.Devices[pair.Key];
				device.LastSeen = DateTime.Now;
				device.Value = pair.Value;
			}
		}
	}
}
